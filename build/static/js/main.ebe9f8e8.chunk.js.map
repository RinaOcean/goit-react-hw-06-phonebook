{"version":3,"sources":["components/ContactsList/ContactList.jsx","redux/contacts/contacts-actions.js","components/ContactListItem/ContactsListItem.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["ContactsList","children","className","addContact","createAction","name","number","payload","id","nanoid","removeContact","addFilter","getFilteredContactList","allContacts","filter","normalizedFilter","toLocaleLowerCase","item","includes","connect","contacts","items","contactsItems","dispatch","onDelete","actions","map","type","onClick","ContactForm","state","nameInputId","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","some","contact","alert","onSubmit","reset","this","htmlFor","pattern","title","required","onChange","Component","target","length","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ebe9f8e8.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './ContactsList.scss';\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul className=\"ContactsList\">{children}</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const addContact = createAction(\r\n  'contacts/addContact',\r\n  ({ name, number }) => ({\r\n    payload: {\r\n      id: nanoid(),\r\n      name,\r\n      number,\r\n    },\r\n  }),\r\n);\r\n\r\nexport const removeContact = createAction('contacts/deleteContact');\r\n\r\nexport const addFilter = createAction('contacts/addFilter');\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nimport './ContactsListItem.scss';\r\n\r\nconst ContactsListItem = ({ onDelete, contactsItems }) => (\r\n  <>\r\n    {contactsItems.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id} className=\"ContactsListItem\">\r\n          {name}: {number}\r\n          <button type=\"button\" onClick={() => onDelete(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nconst getFilteredContactList = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n  return allContacts.filter(item =>\r\n    item.name.toLocaleLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contactsItems: getFilteredContactList(items, filter),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onDelete: id => dispatch(actions.removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactsListItem);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\nimport './ContactForm.scss';\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = nanoid();\r\n  numberInputId = nanoid();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const isInContacts = contact =>\r\n      contact.name === this.state.name || contact.number === this.state.number;\r\n\r\n    if (this.props.items.some(isInContacts)) {\r\n      alert(`Contact is already in contacts`);\r\n      return;\r\n    }\r\n    this.props.onSubmit({ ...this.state });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className=\"ContactForm\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>Name</label>\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChange}\r\n          id={this.nameInputId}\r\n        />\r\n        <label htmlFor={this.numberInputId}>Number</label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n          id={this.numberInputId}\r\n        />\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  items: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(actions.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactForm);\r\n","import { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"Filter\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onChange: event => dispatch(actions.addFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(Filter);\r\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport ContactsList from './components/ContactsList';\nimport ContactsListItem from './components/ContactListItem';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\n\nimport './App.scss';\n\nfunction App({ items }) {\n  return (\n    <div className=\"phonebook\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n\n      {items.length > 0 ? (\n        <>\n          <Filter />\n          <ContactsList>\n            <ContactsListItem />\n          </ContactsList>\n        </>\n      ) : (\n        <span>You have no contacts yet </span>\n      )}\n    </div>\n  );\n}\nconst mapStateToProps = state => ({\n  items: state.contacts.items,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.removeContact]: (state, { payload }) =>\r\n    state.filter(item => item.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  // _ заменяет неиспользуемый параметр(в данном случае state)\r\n  [actions.addFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import {\r\n  combineReducers,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}